<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Browse" xml:space="preserve">
    <value>Browse</value>
  </data>
  <data name="CheckBoxPrompt" xml:space="preserve">
    <value>Yes, the first line is a header</value>
  </data>
  <data name="CheckMessage" xml:space="preserve">
    <value>Great, a quick check shows that the selected CSV file appears to be all good! Please confirm whether or not the first line in the file is a header by selecting or unselecting the check box below...</value>
  </data>
  <data name="CSVFormat" xml:space="preserve">
    <value>CSV (Comma Delimited)|*.csv</value>
  </data>
  <data name="InvalidFile" xml:space="preserve">
    <value>The file '{0}' does not exist in the path provided. Please select a valid file.</value>
  </data>
  <data name="InvalidPath" xml:space="preserve">
    <value>The path '{0}' does not exist. Please select a valid path.</value>
  </data>
  <data name="OUTsuranceAssessment" xml:space="preserve">
    <value>OUTsurance Assessment</value>
  </data>
  <data name="ProcessMessage" xml:space="preserve">
    <value>Success! The CSV file has been processed and the data is ready to be saved to text files.</value>
  </data>
  <data name="SaveAddresses" xml:space="preserve">
    <value>Save Addresses Output As</value>
  </data>
  <data name="SaveCommand" xml:space="preserve">
    <value>Click the respective buttons below to save the output files...</value>
  </data>
  <data name="SaveNames" xml:space="preserve">
    <value>Save Names Output As</value>
  </data>
  <data name="SaveWarning" xml:space="preserve">
    <value>One or more of the output files were not saved! Would you like to save now?</value>
  </data>
  <data name="SelectCSV" xml:space="preserve">
    <value>Click the 'Browse' button to select a CSV file</value>
  </data>
  <data name="SelectFile" xml:space="preserve">
    <value>Please select an Input file!</value>
  </data>
  <data name="Start" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="Step1Header" xml:space="preserve">
    <value>Step 1: Select an input file</value>
  </data>
  <data name="Step2Header" xml:space="preserve">
    <value>Step 2: Save the output files</value>
  </data>
  <data name="TXTFormat" xml:space="preserve">
    <value>Text |*.txt</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome!</value>
  </data>
  <data name="WelcomeBody" xml:space="preserve">
    <value>This utility will read a CSV file containing two fiels i.e. Customer Name, and Customer Address. The CSV file will then be converted to two text files. The first file will contain all names and the number of times the name appears in the CSV file (frequency). The second file will contain all addresses sorted by street name, then by number.</value>
  </data>
  <data name="WelcomeFooter" xml:space="preserve">
    <value>Ready to get started? Just click the 'Start' button below...</value>
  </data>
</root>